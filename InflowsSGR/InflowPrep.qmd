This is a file to prep inflow for forecasting. It cleans the data and converts it from hourly to daily. 

```{r packages}
pacman::p_load(tidyverse, dplyr, ggplot2, lubridate, here, tsibble, zoo)
```


```{r read in outflow data}
sug_river <- read_csv("~/GitHubRepos/CareyLabVT/SUNP-GLM_AED/InflowsSGR/SugarOutflow.csv") |> select(-c(...1))

sug_river <- sug_river |> 
  filter(discharge_cfs < 750)  # there are definitely a few discharge points that are too high. Excluding everything above 750 cfs

#is there missing data in our timeseries of outflow?
sug_river |> tsibble::as_tsibble(index = "date") |> 
  tsibble::has_gaps() #yes, I have missing data

gaps <- sug_river |> tsibble::as_tsibble(index = "date") |> 
 tsibble::count_gaps() #some of these gaps are big, longest gap is 5 days. going to use na_approx to interpolate for now

#plot discharge data
sug_river |> 
  filter(date < "2018-01-01 00:00:00") |> 
  ggplot(aes(date, discharge_cfs)) + geom_point() 
# there are definitely a few discharge points that are too high. Excluded everything above 750 cfs

#get daily discharge in cfs
#This averages the cfs by day
#this does not account for any missing data
sug_fill <- sug_river |> 
  tsibble::as_tsibble(index = "date") |> 
  tsibble::fill_gaps()|>
mutate(discharge_cfs_linear = zoo::na.approx(discharge_cfs, maxgap  = 150),
       discharge_cfs_spline = zoo::na.spline(discharge_cfs, maxgap  = 150))  |>
  mutate(day = date(date)) |> 
  mutate(doy = yday(date))

sug_fill |> 
  filter(date > "2017-12-10 00:00:00" & date < "2018-01-01 00:00:00") |> 
  ggplot(aes(date, discharge_cfs)) + geom_point() +
  geom_line(aes(date, discharge_cfs_linear, color = "linear"))+
  geom_line(aes(date, discharge_cfs_spline, color = "spline"))
#based on this, we're going to use linear
  
#double check that I got all the gaps #no gaps! 
sug_fill |> tsibble::as_tsibble(index = "date") |> 
  tsibble::has_gaps()

#sug_fill <- sug_fill |> tsibble::as_tsibble(index = "date") 

sug_daily <- sug_fill |> 
  mutate_at(c("discharge_cfs_linear"), as.numeric) |> 
  reframe(.by = all_of(c("day", "doy")), discharge_daily = mean(discharge_cfs_linear)) |> 
  select(day, doy, discharge_daily)

sug_daily |> 
  #filter(date > "2017-12-10 00:00:00" & date < "2018-01-01 00:00:00") |> 
  ggplot(aes(day, discharge_daily)) + geom_point()

#triple check that I got all the gaps
sug_daily |> tsibble::as_tsibble(index = "day") |> 
  tsibble::count_gaps()

```

```{r write csv}
write_csv(sug_daily, "sug_daily.csv")
```

```{r inflow nutrients}
nuts <- read_csv("inflowchem_TNTPDOC_allstream_01Mar2021.csv")

summary(nuts)

nuts <- nuts |> 
  subset(date > "2000-01-01")

nuts |> ggplot(aes(date, TP_mmolm3)) + geom_point()
nuts |> ggplot(aes(date, TN_mmolm3)) + geom_point()
nuts |> ggplot(aes(date, DOC_mmolm3)) + geom_point()
```

```{r bootstrap TP}
nuts <- read_csv("inflowchem_TNTPDOC_allstream_01Mar2021.csv")

summary(nuts)

nuts <- nuts |> 
  subset(date > "2001-01-01")

nuts$date<-as.character(nuts$date)
nuts$date<-as.POSIXct(nuts$date, format="%Y-%m-%d")
nuts$year<-as.POSIXct(nuts$date, format="%Y")

plot(nuts$date, nuts$TP_mmolm3)
plot(nuts$date, nuts$TN_mmolm3)
plot(nuts$date, nuts$DOC_mmolm3)
```

```{r}
require(dplyr); require(lubridate)

nuts <- mutate(nuts, date = ymd(date), year = year(date))
nuts <- nuts |> drop_na(TP_mmolm3)
inflows<-as.numeric(c("505","790","830","788","510","540","800","835","805","670","760"))
inflows2 <- as.numeric(c("835", "830", "800", "505", "760", "750", "788", "790", "670", "540", "510", "805", "665", "720", "515", "640"))

inflowName<-c("i505", "i790", "i830", "i788","i510","i540","i800","i835","i805","i670","i760")
#check for zero!!!

inflowName2 <- c("i835", "i830", "i800", "i505", "i760", "i750", "i788", "i790", "i670", "i540", "i510", "i805", "i665", "i720", "i515", "i640")

## table of mu and sigma ####
blocks<-c("2001-2005", "2006-2010", "post 2011")
bl_start_yr<-c(2000,2005,2010)
bl_end_yr<-c(2006,2011,2018)


block_dist<-matrix(data = NA,nrow = (length(blocks)*length(inflows2)),ncol = 3)
colnames(block_dist)<-c("name","mu","sigma")

nuts$TP_mmolm3[nuts$TP_mmolm3<0.1520642]<-0.1520642
k = 1
# j = 1
# i = 1
for (i in 1:length(inflows2)){
  for (j in 1:length(blocks)){
    
    obs_dist_in <- nuts[which(nuts$stream_no==inflows2[i] & nuts$year > bl_start_yr[j] & nuts$year < bl_end_yr[j]),]
    
    mu <- mean(obs_dist_in$TP_mmolm3, na.rm = TRUE)  # Set the mean.
    sigma <- sd(obs_dist_in$TP_mmolm3, na.rm = TRUE) # Set the standard deviation.
    
    block_dist[k,1] <- paste(inflowName2[i],"_",blocks[j], sep="")
    block_dist[k,2] <- round(mu, digits = 3)
    block_dist[k,3] <- round(sigma, digits = 3)
    k <- k+1
  }
}


##### bootstrapping ######
date<-seq(as.Date("2020-01-01"), as.Date("2025-12-30"), by="days")
boot<-NA*numeric(length=length(date))

#index<-nuts[-(which(nuts$stream_no==505 & nuts$TP_mmolm3>3)),] ##### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#index<-index[-(which(index$stream_no==788 & index$TP_mmolm3>15)),]
j=1
i=1
#index = nuts
#inflows = inflows2
for(j in 1:length(inflows2)){
  inflow<-nuts[which(nuts$stream_no==inflows2[j]),]
  
  for(i in 1:length(date)){
    
    datemin <- min(inflow$year, na.rm=TRUE)
    boot_min <- datemin+2
    yr_in <- year(date[i])
    
    if(year(date[i]) < boot_min){
      obs_dist_in<-inflow[which(inflow$year<(datemin+5)),] 
      n = 1000       # Number of random numbers to use.
      mu<-mean(obs_dist_in$TP_mmolm3, na.rm = TRUE)  # Set the mean.
      sigma<-sd(obs_dist_in$TP_mmolm3, na.rm = TRUE) # Set the standard deviation.
      randNorm <- rnorm(n, mu, sigma) # Use rnorm function to generate random numbers.
      TP_iteration<-randNorm[min(which(randNorm > 0))]
      
      boot[i]<-TP_iteration
    } else if(year(date[i]) > 2012){
      obs_dist_in <- inflow[which(inflow$year > (2010)),] 
      n = 1000       # Number of random numbers to use.
      mu<-mean(obs_dist_in$TP_mmolm3, na.rm = TRUE)  # Set the mean.
      sigma<-sd(obs_dist_in$TP_mmolm3, na.rm = TRUE) # Set the standard deviation.
      randNorm <- rnorm(n, mu, sigma) # Use rnorm function to generate random numbers.
      TP_iteration<-randNorm[min(which(randNorm > 0))]
      
      boot[i] <- TP_iteration
    } else{
      obs_dist_in<-inflow[which(inflow$year > (yr_in-10) & inflow$year < (yr_in+10)),] 
      n = 1000       # Number of random numbers to use.
      mu<-mean(obs_dist_in$TP_mmolm3, na.rm = TRUE)  # Set the mean.
      sigma<-sd(obs_dist_in$TP_mmolm3, na.rm = TRUE) # Set the standard deviation.
      randNorm <- rnorm(n, mu, sigma) # Use rnorm function to generate random numbers.
      TP_iteration<-randNorm[min(which(randNorm > 0))]
      
      boot[i]<-TP_iteration
    }
  }
  title<-paste(inflowName[j],"_TP", sep="")
  assign(title,boot)
}

Boot_Inflows<-as.data.frame(cbind(as.character(date),i505_TP,
                                  i790_TP, i830_TP, i788_TP,
                                  i510_TP,i540_TP,i800_TP,i835_TP,i805_TP,i670_TP,i760_TP))

for(i in 1:nrow(Boot_Inflows)){
  TP_index<-sum(as.numeric(as.character(Boot_Inflows[i,2])), 
                as.numeric(as.character(Boot_Inflows[i,3])),
                as.numeric(as.character(Boot_Inflows[i,4])), 
                as.numeric(as.character(Boot_Inflows[i,5])),
                as.numeric(as.character(Boot_Inflows[i,6])),
                as.numeric(as.character(Boot_Inflows[i,7])), 
                as.numeric(as.character(Boot_Inflows[i,8])),
                as.numeric(as.character(Boot_Inflows[i,9])), 
                as.numeric(as.character(Boot_Inflows[i,10])),
                as.numeric(as.character(Boot_Inflows[i,11])),
                as.numeric(as.character(Boot_Inflows[i,12])),na.rm = TRUE)

  Boot_Inflows[i,13]<-TP_index
}

colnames(Boot_Inflows)[1] <- 'Date'
colnames(Boot_Inflows)[13] <- 'Inflow_all_TP'

#write.csv(x = Boot_Inflows,file = paste0("Boot_Inflows_", Sys.Date(), ".csv"), row.names = FALSE, quote = FALSE)
```



